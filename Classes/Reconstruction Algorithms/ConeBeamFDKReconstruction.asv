classdef ConeBeamFDKReconstruction < Reconstruction
    % ConeBeamFDKReconstruction
    
    properties
        displayName = 'FDK Algorithm [TIGRE]'
        fullName = 'FDK Algorithm (CBCT)'
                
        
        % specific for FDK
        parker = 0;
        filter = TigreFilterTypes.ramLakFilter
    end
    
    methods(Static)
        function handle = getSettingsTabHandle(app)
            handle = app.ConeBeamFDKSettingsTab;
        end
    end
    
    methods
        function string = getNameString(recon)
            string = 'CBCT FDK';
        end     
        
        function recon = createFromGUIForSubClass(recon, app)
            
            recon.parker = app.CBCT_FDK_ParkerEditField.Value;
            recon.filter = app.CBCT_FDK_FilterDropDown.Value;
        end
        
        function app = setGUI(recon, app)
            % set visible tab
            hideAllAlgorithmSettingsTabs(app);
            
            tabHandle = recon.getSettingsTabHandle(app);
            tabHandle.Parent = app.ReconstructionAlgorithmSettingsTabGroup;
            
            % set drop-down options
            setDropDownOptions(...
                app.CBCT_FDK_InitialImageDropDown,...
                enumeration('TigreInitialImageChoices'),...
                'displayString');
            
            % set settings  
            app.CBCT_FDK_RayRejectionCheckBox.Value = recon.useRayRejection;
            
            app.CBCT_FDK_NumberOfIterationsEditField.Value = recon.numberOfIterations;
            app.CBCT_FDK_ForwardProjectionAccuracyEditField.Value = recon.forwardProjectionAccuracy;
            
            app.CBCT_FDK_LambdaEditField.Value = recon.lambda;
            app.CBCT_FDK_LambdaReductionEditField.Value = recon.lambdaReduction;
            app.CBCT_FDK_InitialImageDropDown.Value = recon.initialImage;
            app.CBCT_FDK_VerboseCheckBox.Value = recon.verbosity;
        end
                
        function recon = runReconstruction(recon, reconRun, simulationOrImagingScanRun, app)
            % get everything converted for TIGRE
            [projections, tigreGeometry, tigreAnglesInRadians] = getValuesForTigreReconstruction(recon, simulationOrImagingScanRun);
               
            % run reconstruction
            if recon.useRayRejection
                rejectionMaps = single(zeros(size(projections)));
                anglesInDeg = simulationOrImagingScanRun.scan.getScanAnglesInDegrees();
                
                for i=1:length(anglesInDeg)
                    [~, rayExclusionMap] = loadProjectionAndRayExclusionMapDataFiles(simulationOrImagingScanRun, 1, anglesInDeg(i), 1, 1);
                    
                    rejectionMaps(:,:,i) = single(~rayExclusionMap);
                end
                
                reconDataSet = FDK_withRayRejection(projections, rejectionMaps, tigreGeometry, tigreAnglesInRadians,...
                    recon.numberOfIterations,...
                    'lambda', recon.lambda,...
                    'lambda_red', recon.lambdaReduction,...
                    'Init', recon.initialImage.tigreString,...
                    'Verbose', recon.verbosity);
            else
                reconDataSet = FDK(projections, tigreGeometry, tigreAnglesInRadians,...
                    recon.numberOfIterations,...
                    'lambda', recon.lambda,...
                    'lambda_red', recon.lambdaReduction,...
                    'Init', recon.initialImage.tigreString,...
                    'Verbose', recon.verbosity);
            end
            
            % convert data set to Gyrfalcon units
            reconDataSet = convertReconDataSetFromTigreToGyrfalcon(reconDataSet);
            
            % set to the Reconstruction object
            recon.reconDataSetSlices = {reconDataSet};
        end
        
        function [] = saveOutputSubclass(recon, savePath)
            % nothing special to do here 
        end
    end
    
end
