function results = getRoiAnalysisResults(run, numColumns)
%UNTITLED6 Summary of this function goes here
%   Detailed explanation goes here

% ROIs
botMask = run.botRoiMask;
midMask = run.midRoiMask;
topMask = run.topRoiMask;

cathMask = run.cathMask;

botSlices = run.botSlices;
midSlices = run.midSlices;
topSlices = run.topSlices;

d1ProfileCoords = run.d1ProfileCoords;
d2ProfileCoords = run.d2ProfileCoords;        

% allocate output
numRows = run.numRows;

results = cell(numRows, numColumns);

% run analysis and set rows
switch run.reconAlgorithm
    case 'FDK'
        results{1,1} = run.gelName;
        results{1,2} = run.reconAlgorithm;
        results{1,3} = boolToString(run.usedFloodFields);
        results{1,4} = boolToString(run.usedCatheterReject);
        results(1,5:7) = {'-','-','-'};
        results{1,8} = 0;
        
        % load volume and calculate metrics
        volume = loadVffVolume(
        
        results(1,9:end) = getMetricsForRoi(...
            volume,...
            botMask, midMask, topMask, cathMask,...
            botSlices, midSlices, topSlices,...
            d1ProfileCoords, d2ProfileCoords);
        

% numIterList = {'10', '15'};
% 
% subsetsList = {...
%     '[26 2]',...
%     '[51 3]',...
%     '[103 6]',...
%     '[205 13]',...
%     '[205 41]'};
% 
% cList = {'0.001', '0.005', '0.01', '0.05', '0.1'};

numIterList = {'10'};

subsetsList = {...
    '[26 2]'};

cList = {'0.001'};

numColumns = 3 + 1 + (3 * 8);

results = cell(1 + (length(numIterList)*length(subsetsList)*length(cList)), numColumns);
resultsSub = cell(1 + (length(numIterList)*length(subsetsList)*length(cList)), numColumns);

results(1,:) = {...
    'Num Iterations', 'Num Subsets', 'c (TV)',...
    'Time (s)',...
    'Mean (Bot)', 'Mean (Mid)', 'Mean (Top)',...
    'Var (Bot)', 'Var (Mid)', 'Var (Top)',...
    'Grad Mean (Bot)', 'Grad Mean (Mid)', 'Grad Mean (Top)',...
    'Grad Var (Bot)', 'Grad Var (Mid)', 'Grad Var (Top)',...
    'd1 Mean (Bot)', 'd1 Mean (Mid)', 'd1 Mean (Top)',...
    'd1 Var (Bot)', 'd1 Var (Mid)', 'd1 Var (Top)',...
    'd2 Mean (Bot)', 'd2 Mean (Mid)', 'd2 Mean (Top)',...
    'd2 Var (Bot)', 'd2 Var (Mid)', 'd2 Var (Top)'};

resultsSub(1,:) = results(1,:);

counter = 1;

for k=1:length(numIterList)
    numIters = numIterList{k};
    
    for j=1:length(subsetsList)
        subsets = subsetsList{j};
        
        for i=1:length(cList)
            c = cList{i};
            
            disp(counter);
            
            results(counter,1:3) = {numIters, subsets, c};
            resultsSub(counter,1:3) = {numIters, subsets, c};
            
            if directDelta
                volume = loadVolume(prePath, volumePath, 48);%counter);
                run = loadReconRun(prePath, 48);%counter);
                
                time = run.getRunTimeInSeconds();
            else
                volumePre = loadVolume(prePath, volumePath, 48);%counter);
                volumePost = loadVolume(postPath, volumePath, 48);%counter);
                
                runPre = loadReconRun(preRunPath, 48);%counter);
                runPost = loadReconRun(postRunPath, 48);%counter);
                
                volume = volumePost - volumePre;
                time = runPre.getRunTimeInSeconds() + runPost.getRunTimeInSeconds();
            end
            
            [...
                meanValBot, meanValMid, meanValTop,...
                varValBot, varValMid, varValTop,...
                gradMeanBot, gradMeanMid, gradMeanTop,...
                gradVarBot, gradVarMid, gradVarTop,...
                meanValBotSub, meanValMidSub, meanValTopSub,...
                varValBotSub, varValMidSub, varValTopSub,...
                gradMeanBotSub, gradMeanMidSub, gradMeanTopSub,...
                gradVarBotSub, gradVarMidSub, gradVarTopSub,...
                d1MeanBot, d1MeanMid, d1MeanTop,...
                d1VarBot, d1VarMid, d1VarTop,...
                d2MeanBot, d2MeanMid, d2MeanTop,...
                d2VarBot, d2VarMid, d2VarTop] = ...
                getMetricsForRoi(volume,...
                botMask, midMask, topMask, cathMask,...
                botSlices, midSlices, topSlices,...
                d1ProfileCoords, d2ProfileCoords);
            
            results(counter+1,4:end) = {...
                time,...
                meanValBot, meanValMid, meanValTop,...
                varValBot, varValMid, varValTop,...
                gradMeanBot, gradMeanMid, gradMeanTop,...
                gradVarBot, gradVarMid, gradVarTop,...
                d1MeanBot, d1MeanMid, d1MeanTop,...
                d1VarBot, d1VarMid, d1VarTop,...
                d2MeanBot, d2MeanMid, d2MeanTop,...
                d2VarBot, d2VarMid, d2VarTop};
            
            resultsSub(counter+1,4:end) = {...
                time,...
                meanValBotSub, meanValMidSub, meanValTopSub,...
                varValBotSub, varValMidSub, varValTopSub,...
                gradMeanBotSub, gradMeanMidSub, gradMeanTopSub,...
                gradVarBotSub, gradVarMidSub, gradVarTopSub,...
                d1MeanBot, d1MeanMid, d1MeanTop,...
                d1VarBot, d1VarMid, d1VarTop,...
                d2MeanBot, d2MeanMid, d2MeanTop,...
                d2VarBot, d2VarMid, d2VarTop};
            
            counter = counter + 1;   
        end
    end
end


end
end

function volume = loadVolume(toReconPath, volumePath, counter)
    data = load([toReconPath, num2str(counter), volumePath]);
    
    volume = data.reconData;
end

function run = loadReconRun(prefixPath, reconNum)
    data = load([prefixPath, num2str(reconNum), ' (CBCT OSC-TV)\Thesis Recon ', num2str(reconNum), ' (CBCT OSC-TV).mat']);
    
    run = data.run;
end

function string = boolToString(bool)
    if bool
        string = 'Y';
    else
        string = 'N';
    end
end